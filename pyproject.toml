[tool.poetry]
name = "tiny-graphrag"
version = "0.1.0"
description = ""
authors = ["sdiehl <stephen.m.diehl@gmail.com>"]
readme = "README.md"
license = "MIT"
packages = [
    { include = "tiny_graphrag", from = "src" },
]

[tool.poetry.scripts]
graphrag = "tiny_graphrag.main:main"

[tool.poetry.dependencies]
python = ">=3.10,<3.11"
networkx = "^3.4.2"
gliner = "^0.2.13"
glirel = "^0.1.4"
spacy = "^3.8.2"
protobuf = "3.20.0"
datasets = "^3.0.2"
sqlalchemy = "^2.0.36"
psycopg2-binary = "^2.9.10"
pgvector = "^0.3.6"
sentence-transformers = "^3.2.1"
llama-cpp-python = "^0.3.1"
gliner-spacy = "^0.0.10"
cdlib = "^0.4.0"
igraph = "^0.11.8"
leidenalg = "^0.10.2"
tqdm = "^4.66.6"
termcolor = "^2.5.0"

[tool.poetry.group.apple]
optional = true

[tool.poetry.group.nvidia]
optional = true

[tool.poetry.group.apple.dependencies]
thinc-apple-ops = "^1.0.0"

[tool.poetry.group.nvidia.dependencies]
thinc-gpu-ops = "^0.0.4"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
black = "^24.10.0"
ruff = "^0.7.1"
mypy = "^1.13.0"
sqlalchemy-stubs = "^0.4"
jupyter = "^1.1.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
disallow_incomplete_defs = "false"
disallow_untyped_defs = "false"
strict = "true"
pretty = "true"
warn_return_any = "true"
warn_unused_configs = "true"
warn_redundant_casts = "true"
warn_unused_ignores = "true"
ignore_missing_imports = "true"
no_implicit_reexport = "true"
strict_optional = "true"
strict_equality = "true"
extra_checks = "true"
check_untyped_defs = "true"
disallow_subclassing_any = "true"
disallow_untyped_decorators = "true"
disallow_untyped_calls = "true"
disallow_any_generics = "true"
follow_imports = "silent"
plugins = "sqlmypy"

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "N",  # PEP8 naming convetions
    "D"  # pydocstyle
]
ignore = [
    "D104",  # missing docstring
    "D100",  # missing docstring in public class
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"prompts.py" = ["E501"]